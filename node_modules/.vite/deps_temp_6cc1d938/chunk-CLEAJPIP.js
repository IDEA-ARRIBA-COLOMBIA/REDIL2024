import {
  require_lib
} from "./chunk-HVLK6TZQ.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/@form-validation/plugin-message/lib/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@form-validation/plugin-message/lib/cjs/index.js"(exports) {
    "use strict";
    var core = require_lib();
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var classSet = core.utils.classSet;
    var Message = (
      /** @class */
      function(_super) {
        __extends(Message2, _super);
        function Message2(opts) {
          var _this = _super.call(this, opts) || this;
          _this.useDefaultContainer = false;
          _this.messages = /* @__PURE__ */ new Map();
          _this.defaultContainer = document.createElement("div");
          _this.useDefaultContainer = !opts || !opts.container;
          _this.opts = Object.assign({}, {
            container: function(_field, _element) {
              return _this.defaultContainer;
            }
          }, opts);
          _this.elementIgnoredHandler = _this.onElementIgnored.bind(_this);
          _this.fieldAddedHandler = _this.onFieldAdded.bind(_this);
          _this.fieldRemovedHandler = _this.onFieldRemoved.bind(_this);
          _this.validatorValidatedHandler = _this.onValidatorValidated.bind(_this);
          _this.validatorNotValidatedHandler = _this.onValidatorNotValidated.bind(_this);
          return _this;
        }
        Message2.getClosestContainer = function(element, upper, pattern) {
          var ele = element;
          while (ele) {
            if (ele === upper) {
              break;
            }
            ele = ele.parentElement;
            if (pattern.test(ele.className)) {
              break;
            }
          }
          return ele;
        };
        Message2.prototype.install = function() {
          if (this.useDefaultContainer) {
            this.core.getFormElement().appendChild(this.defaultContainer);
          }
          this.core.on("core.element.ignored", this.elementIgnoredHandler).on("core.field.added", this.fieldAddedHandler).on("core.field.removed", this.fieldRemovedHandler).on("core.validator.validated", this.validatorValidatedHandler).on("core.validator.notvalidated", this.validatorNotValidatedHandler);
        };
        Message2.prototype.uninstall = function() {
          if (this.useDefaultContainer) {
            this.core.getFormElement().removeChild(this.defaultContainer);
          }
          this.messages.forEach(function(message) {
            return message.parentNode.removeChild(message);
          });
          this.messages.clear();
          this.core.off("core.element.ignored", this.elementIgnoredHandler).off("core.field.added", this.fieldAddedHandler).off("core.field.removed", this.fieldRemovedHandler).off("core.validator.validated", this.validatorValidatedHandler).off("core.validator.notvalidated", this.validatorNotValidatedHandler);
        };
        Message2.prototype.onEnabled = function() {
          this.messages.forEach(function(_element, message, _map) {
            classSet(message, {
              "fv-plugins-message-container--enabled": true,
              "fv-plugins-message-container--disabled": false
            });
          });
        };
        Message2.prototype.onDisabled = function() {
          this.messages.forEach(function(_element, message, _map) {
            classSet(message, {
              "fv-plugins-message-container--enabled": false,
              "fv-plugins-message-container--disabled": true
            });
          });
        };
        Message2.prototype.onFieldAdded = function(e) {
          var _this = this;
          var elements = e.elements;
          if (elements) {
            elements.forEach(function(ele) {
              var msg = _this.messages.get(ele);
              if (msg) {
                msg.parentNode.removeChild(msg);
                _this.messages.delete(ele);
              }
            });
            this.prepareFieldContainer(e.field, elements);
          }
        };
        Message2.prototype.onFieldRemoved = function(e) {
          var _this = this;
          if (!e.elements.length || !e.field) {
            return;
          }
          var type = e.elements[0].getAttribute("type");
          var elements = "radio" === type || "checkbox" === type ? [e.elements[0]] : e.elements;
          elements.forEach(function(ele) {
            if (_this.messages.has(ele)) {
              var container = _this.messages.get(ele);
              container.parentNode.removeChild(container);
              _this.messages.delete(ele);
            }
          });
        };
        Message2.prototype.prepareFieldContainer = function(field, elements) {
          var _this = this;
          if (elements.length) {
            var type = elements[0].getAttribute("type");
            if ("radio" === type || "checkbox" === type) {
              this.prepareElementContainer(field, elements[0], elements);
            } else {
              elements.forEach(function(ele) {
                return _this.prepareElementContainer(field, ele, elements);
              });
            }
          }
        };
        Message2.prototype.prepareElementContainer = function(field, element, elements) {
          var container;
          if ("string" === typeof this.opts.container) {
            var selector = "#" === this.opts.container.charAt(0) ? '[id="'.concat(this.opts.container.substring(1), '"]') : this.opts.container;
            container = this.core.getFormElement().querySelector(selector);
          } else {
            container = this.opts.container(field, element);
          }
          var message = document.createElement("div");
          container.appendChild(message);
          classSet(message, {
            "fv-plugins-message-container": true,
            "fv-plugins-message-container--enabled": this.isEnabled,
            "fv-plugins-message-container--disabled": !this.isEnabled
          });
          this.core.emit("plugins.message.placed", {
            element,
            elements,
            field,
            messageElement: message
          });
          this.messages.set(element, message);
        };
        Message2.prototype.getMessage = function(result) {
          return typeof result.message === "string" ? result.message : result.message[this.core.getLocale()];
        };
        Message2.prototype.onValidatorValidated = function(e) {
          var _a;
          var elements = e.elements;
          var type = e.element.getAttribute("type");
          var element = ("radio" === type || "checkbox" === type) && elements.length > 0 ? elements[0] : e.element;
          if (this.messages.has(element)) {
            var container = this.messages.get(element);
            var messageEle = container.querySelector('[data-field="'.concat(e.field.replace(/"/g, '\\"'), '"][data-validator="').concat(e.validator.replace(/"/g, '\\"'), '"]'));
            if (!messageEle && !e.result.valid) {
              var ele = document.createElement("div");
              ele.innerHTML = this.getMessage(e.result);
              ele.setAttribute("data-field", e.field);
              ele.setAttribute("data-validator", e.validator);
              if (this.opts.clazz) {
                classSet(ele, (_a = {}, _a[this.opts.clazz] = true, _a));
              }
              container.appendChild(ele);
              this.core.emit("plugins.message.displayed", {
                element: e.element,
                field: e.field,
                message: e.result.message,
                messageElement: ele,
                meta: e.result.meta,
                validator: e.validator
              });
            } else if (messageEle && !e.result.valid) {
              messageEle.innerHTML = this.getMessage(e.result);
              this.core.emit("plugins.message.displayed", {
                element: e.element,
                field: e.field,
                message: e.result.message,
                messageElement: messageEle,
                meta: e.result.meta,
                validator: e.validator
              });
            } else if (messageEle && e.result.valid) {
              container.removeChild(messageEle);
            }
          }
        };
        Message2.prototype.onValidatorNotValidated = function(e) {
          var elements = e.elements;
          var type = e.element.getAttribute("type");
          var element = "radio" === type || "checkbox" === type ? elements[0] : e.element;
          if (this.messages.has(element)) {
            var container = this.messages.get(element);
            var messageEle = container.querySelector('[data-field="'.concat(e.field.replace(/"/g, '\\"'), '"][data-validator="').concat(e.validator.replace(/"/g, '\\"'), '"]'));
            if (messageEle) {
              container.removeChild(messageEle);
            }
          }
        };
        Message2.prototype.onElementIgnored = function(e) {
          var elements = e.elements;
          var type = e.element.getAttribute("type");
          var element = "radio" === type || "checkbox" === type ? elements[0] : e.element;
          if (this.messages.has(element)) {
            var container_1 = this.messages.get(element);
            var messageElements = [].slice.call(container_1.querySelectorAll('[data-field="'.concat(e.field.replace(/"/g, '\\"'), '"]')));
            messageElements.forEach(function(messageEle) {
              container_1.removeChild(messageEle);
            });
          }
        };
        return Message2;
      }(core.Plugin)
    );
    exports.Message = Message;
  }
});

// node_modules/@form-validation/plugin-message/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@form-validation/plugin-message/lib/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_cjs();
    }
  }
});

export {
  require_lib2 as require_lib
};
//# sourceMappingURL=chunk-CLEAJPIP.js.map
