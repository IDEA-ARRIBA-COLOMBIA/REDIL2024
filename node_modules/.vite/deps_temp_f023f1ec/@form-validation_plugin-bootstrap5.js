import {
  require_lib as require_lib2
} from "./chunk-JUBL42GO.js";
import "./chunk-CLEAJPIP.js";
import {
  require_lib
} from "./chunk-HVLK6TZQ.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/@form-validation/plugin-bootstrap5/lib/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@form-validation/plugin-bootstrap5/lib/cjs/index.js"(exports) {
    "use strict";
    var core = require_lib();
    var pluginFramework = require_lib2();
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var classSet = core.utils.classSet;
    var hasClass = core.utils.hasClass;
    var Bootstrap5 = (
      /** @class */
      function(_super) {
        __extends(Bootstrap52, _super);
        function Bootstrap52(opts) {
          var _this = _super.call(this, Object.assign({}, {
            eleInvalidClass: "is-invalid",
            eleValidClass: "is-valid",
            formClass: "fv-plugins-bootstrap5",
            rowInvalidClass: "fv-plugins-bootstrap5-row-invalid",
            rowPattern: /^(.*)(col|offset)(-(sm|md|lg|xl))*-[0-9]+(.*)$/,
            rowSelector: ".row",
            rowValidClass: "fv-plugins-bootstrap5-row-valid"
          }, opts)) || this;
          _this.eleValidatedHandler = _this.handleElementValidated.bind(_this);
          return _this;
        }
        Bootstrap52.prototype.install = function() {
          _super.prototype.install.call(this);
          this.core.on("core.element.validated", this.eleValidatedHandler);
        };
        Bootstrap52.prototype.uninstall = function() {
          _super.prototype.uninstall.call(this);
          this.core.off("core.element.validated", this.eleValidatedHandler);
        };
        Bootstrap52.prototype.handleElementValidated = function(e) {
          var type = e.element.getAttribute("type");
          if (("checkbox" === type || "radio" === type) && e.elements.length > 1 && hasClass(e.element, "form-check-input")) {
            var inputParent = e.element.parentElement;
            if (hasClass(inputParent, "form-check") && hasClass(inputParent, "form-check-inline")) {
              classSet(inputParent, {
                "is-invalid": !e.valid,
                "is-valid": e.valid
              });
            }
          }
        };
        Bootstrap52.prototype.onIconPlaced = function(e) {
          classSet(e.element, {
            "fv-plugins-icon-input": true
          });
          var parent = e.element.parentElement;
          if (hasClass(parent, "input-group")) {
            parent.parentElement.insertBefore(e.iconElement, parent.nextSibling);
            if (e.element.nextElementSibling && hasClass(e.element.nextElementSibling, "input-group-text")) {
              classSet(e.iconElement, {
                "fv-plugins-icon-input-group": true
              });
            }
          }
          var type = e.element.getAttribute("type");
          if ("checkbox" === type || "radio" === type) {
            var grandParent = parent.parentElement;
            if (hasClass(parent, "form-check")) {
              classSet(e.iconElement, {
                "fv-plugins-icon-check": true
              });
              parent.parentElement.insertBefore(e.iconElement, parent.nextSibling);
            } else if (hasClass(parent.parentElement, "form-check")) {
              classSet(e.iconElement, {
                "fv-plugins-icon-check": true
              });
              grandParent.parentElement.insertBefore(e.iconElement, grandParent.nextSibling);
            }
          }
        };
        Bootstrap52.prototype.onMessagePlaced = function(e) {
          e.messageElement.classList.add("invalid-feedback");
          var inputParent = e.element.parentElement;
          if (hasClass(inputParent, "input-group")) {
            inputParent.appendChild(e.messageElement);
            classSet(inputParent, {
              "has-validation": true
            });
            return;
          }
          var type = e.element.getAttribute("type");
          if (("checkbox" === type || "radio" === type) && hasClass(e.element, "form-check-input") && hasClass(inputParent, "form-check") && !hasClass(inputParent, "form-check-inline")) {
            e.elements[e.elements.length - 1].parentElement.appendChild(e.messageElement);
          }
        };
        return Bootstrap52;
      }(pluginFramework.Framework)
    );
    exports.Bootstrap5 = Bootstrap5;
  }
});

// node_modules/@form-validation/plugin-bootstrap5/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@form-validation/plugin-bootstrap5/lib/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_cjs();
    }
  }
});
export default require_lib3();
//# sourceMappingURL=@form-validation_plugin-bootstrap5.js.map
