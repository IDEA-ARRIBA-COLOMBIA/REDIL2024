import {
  require_lib as require_lib2
} from "./chunk-CLEAJPIP.js";
import {
  require_lib
} from "./chunk-HVLK6TZQ.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/@form-validation/plugin-framework/lib/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@form-validation/plugin-framework/lib/cjs/index.js"(exports) {
    "use strict";
    var core = require_lib();
    var pluginMessage = require_lib2();
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var classSet = core.utils.classSet;
    var closest = core.utils.closest;
    var Framework = (
      /** @class */
      function(_super) {
        __extends(Framework2, _super);
        function Framework2(opts) {
          var _this = _super.call(this, opts) || this;
          _this.results = /* @__PURE__ */ new Map();
          _this.containers = /* @__PURE__ */ new Map();
          _this.opts = Object.assign({}, {
            defaultMessageContainer: true,
            eleInvalidClass: "",
            eleValidClass: "",
            rowClasses: "",
            rowValidatingClass: ""
          }, opts);
          _this.elementIgnoredHandler = _this.onElementIgnored.bind(_this);
          _this.elementValidatingHandler = _this.onElementValidating.bind(_this);
          _this.elementValidatedHandler = _this.onElementValidated.bind(_this);
          _this.elementNotValidatedHandler = _this.onElementNotValidated.bind(_this);
          _this.iconPlacedHandler = _this.onIconPlaced.bind(_this);
          _this.fieldAddedHandler = _this.onFieldAdded.bind(_this);
          _this.fieldRemovedHandler = _this.onFieldRemoved.bind(_this);
          _this.messagePlacedHandler = _this.onMessagePlaced.bind(_this);
          return _this;
        }
        Framework2.prototype.install = function() {
          var _a;
          var _this = this;
          classSet(this.core.getFormElement(), (_a = {}, _a[this.opts.formClass] = true, _a["fv-plugins-framework"] = true, _a));
          this.core.on("core.element.ignored", this.elementIgnoredHandler).on("core.element.validating", this.elementValidatingHandler).on("core.element.validated", this.elementValidatedHandler).on("core.element.notvalidated", this.elementNotValidatedHandler).on("plugins.icon.placed", this.iconPlacedHandler).on("core.field.added", this.fieldAddedHandler).on("core.field.removed", this.fieldRemovedHandler);
          if (this.opts.defaultMessageContainer) {
            this.core.registerPlugin(Framework2.MESSAGE_PLUGIN, new pluginMessage.Message({
              clazz: this.opts.messageClass,
              container: function(field, element) {
                var selector = "string" === typeof _this.opts.rowSelector ? _this.opts.rowSelector : _this.opts.rowSelector(field, element);
                var groupEle = closest(element, selector);
                return pluginMessage.Message.getClosestContainer(element, groupEle, _this.opts.rowPattern);
              }
            }));
            this.core.on("plugins.message.placed", this.messagePlacedHandler);
          }
        };
        Framework2.prototype.uninstall = function() {
          var _a;
          this.results.clear();
          this.containers.clear();
          classSet(this.core.getFormElement(), (_a = {}, _a[this.opts.formClass] = false, _a["fv-plugins-framework"] = false, _a));
          this.core.off("core.element.ignored", this.elementIgnoredHandler).off("core.element.validating", this.elementValidatingHandler).off("core.element.validated", this.elementValidatedHandler).off("core.element.notvalidated", this.elementNotValidatedHandler).off("plugins.icon.placed", this.iconPlacedHandler).off("core.field.added", this.fieldAddedHandler).off("core.field.removed", this.fieldRemovedHandler);
          if (this.opts.defaultMessageContainer) {
            this.core.deregisterPlugin(Framework2.MESSAGE_PLUGIN);
            this.core.off("plugins.message.placed", this.messagePlacedHandler);
          }
        };
        Framework2.prototype.onEnabled = function() {
          var _a;
          classSet(this.core.getFormElement(), (_a = {}, _a[this.opts.formClass] = true, _a));
          if (this.opts.defaultMessageContainer) {
            this.core.enablePlugin(Framework2.MESSAGE_PLUGIN);
          }
        };
        Framework2.prototype.onDisabled = function() {
          var _a;
          classSet(this.core.getFormElement(), (_a = {}, _a[this.opts.formClass] = false, _a));
          if (this.opts.defaultMessageContainer) {
            this.core.disablePlugin(Framework2.MESSAGE_PLUGIN);
          }
        };
        Framework2.prototype.onIconPlaced = function(_e) {
        };
        Framework2.prototype.onMessagePlaced = function(_e) {
        };
        Framework2.prototype.onFieldAdded = function(e) {
          var _this = this;
          var elements = e.elements;
          if (elements) {
            elements.forEach(function(ele) {
              var _a;
              var groupEle = _this.containers.get(ele);
              if (groupEle) {
                classSet(groupEle, (_a = {}, _a[_this.opts.rowInvalidClass] = false, _a[_this.opts.rowValidatingClass] = false, _a[_this.opts.rowValidClass] = false, _a["fv-plugins-icon-container"] = false, _a));
                _this.containers.delete(ele);
              }
            });
            this.prepareFieldContainer(e.field, elements);
          }
        };
        Framework2.prototype.onFieldRemoved = function(e) {
          var _this = this;
          e.elements.forEach(function(ele) {
            var _a;
            var groupEle = _this.containers.get(ele);
            if (groupEle) {
              classSet(groupEle, (_a = {}, _a[_this.opts.rowInvalidClass] = false, _a[_this.opts.rowValidatingClass] = false, _a[_this.opts.rowValidClass] = false, _a));
            }
          });
        };
        Framework2.prototype.prepareFieldContainer = function(field, elements) {
          var _this = this;
          if (elements.length) {
            var type = elements[0].getAttribute("type");
            if ("radio" === type || "checkbox" === type) {
              this.prepareElementContainer(field, elements[0]);
            } else {
              elements.forEach(function(ele) {
                return _this.prepareElementContainer(field, ele);
              });
            }
          }
        };
        Framework2.prototype.prepareElementContainer = function(field, element) {
          var _a;
          var selector = "string" === typeof this.opts.rowSelector ? this.opts.rowSelector : this.opts.rowSelector(field, element);
          var groupEle = closest(element, selector);
          if (groupEle !== element) {
            classSet(groupEle, (_a = {}, _a[this.opts.rowClasses] = true, _a["fv-plugins-icon-container"] = true, _a));
            this.containers.set(element, groupEle);
          }
        };
        Framework2.prototype.onElementValidating = function(e) {
          this.removeClasses(e.element, e.elements);
        };
        Framework2.prototype.onElementNotValidated = function(e) {
          this.removeClasses(e.element, e.elements);
        };
        Framework2.prototype.onElementIgnored = function(e) {
          this.removeClasses(e.element, e.elements);
        };
        Framework2.prototype.removeClasses = function(element, elements) {
          var _a;
          var _this = this;
          var type = element.getAttribute("type");
          var ele = "radio" === type || "checkbox" === type ? elements[0] : element;
          elements.forEach(function(ele2) {
            var _a2;
            classSet(ele2, (_a2 = {}, _a2[_this.opts.eleValidClass] = false, _a2[_this.opts.eleInvalidClass] = false, _a2));
          });
          var groupEle = this.containers.get(ele);
          if (groupEle) {
            classSet(groupEle, (_a = {}, _a[this.opts.rowInvalidClass] = false, _a[this.opts.rowValidatingClass] = false, _a[this.opts.rowValidClass] = false, _a));
          }
        };
        Framework2.prototype.onElementValidated = function(e) {
          var _a, _b;
          var _this = this;
          var elements = e.elements;
          var type = e.element.getAttribute("type");
          var element = "radio" === type || "checkbox" === type ? elements[0] : e.element;
          elements.forEach(function(ele) {
            var _a2;
            classSet(ele, (_a2 = {}, _a2[_this.opts.eleValidClass] = e.valid, _a2[_this.opts.eleInvalidClass] = !e.valid, _a2));
          });
          var groupEle = this.containers.get(element);
          if (groupEle) {
            if (!e.valid) {
              this.results.set(element, false);
              classSet(groupEle, (_a = {}, _a[this.opts.rowInvalidClass] = true, _a[this.opts.rowValidatingClass] = false, _a[this.opts.rowValidClass] = false, _a));
            } else {
              this.results.delete(element);
              var isValid_1 = true;
              this.containers.forEach(function(value, key) {
                if (value === groupEle && _this.results.get(key) === false) {
                  isValid_1 = false;
                }
              });
              if (isValid_1) {
                classSet(groupEle, (_b = {}, _b[this.opts.rowInvalidClass] = false, _b[this.opts.rowValidatingClass] = false, _b[this.opts.rowValidClass] = true, _b));
              }
            }
          }
        };
        Framework2.MESSAGE_PLUGIN = "___frameworkMessage";
        return Framework2;
      }(core.Plugin)
    );
    exports.Framework = Framework;
  }
});

// node_modules/@form-validation/plugin-framework/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@form-validation/plugin-framework/lib/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_cjs();
    }
  }
});

export {
  require_lib3 as require_lib
};
//# sourceMappingURL=chunk-JUBL42GO.js.map
